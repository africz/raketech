version: '3.8'
services:
  backend:
    container_name: ${PROJECT_NAME}-${CONFIG}-backend
    profiles:
    - backend
    - all
    image: ${PROJECT_NAME}-${CONFIG}-backend:latest
    build: ${CONFIG}/backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.backend.rule=Host(`be.localhost`)
      - traefik.http.routers.backend.tls=${DOCKER_STACK_SSL}
    volumes:
      - ${PROJECT_PATH}/backend:/var/www/html:delegated
    networks:
      - proxy
      - host_network
    #tty need for error log to standard error
    tty: true
    #command: /bin/bash

  frontend:
    container_name: ${PROJECT_NAME}-${CONFIG}-frontend
    profiles:
    - frontend
    - all
    image: ${PROJECT_NAME}-${CONFIG}-frontend:latest
    build: ${CONFIG}/frontend
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.frontend.rule=Host(`fe.localhost`)
      - traefik.http.routers.frontend.tls=${DOCKER_STACK_SSL}
    volumes:
      - ${PROJECT_PATH}/frontend:/var/www/html:delegated
    networks:
      - proxy
      - host_network
    #tty need for error log to standard error
    tty: true
    command: /bin/bash
    
  php:
    container_name: ${PROJECT_NAME}-${CONFIG}-php
    profiles:
    - backend
    - all
    image: ${PROJECT_NAME}-${CONFIG}-php:latest
    build: ${CONFIG}/php
    volumes:
      - ${PROJECT_PATH}/backend/storage/xdebug:/tmp/xdebug
      - ${PROJECT_PATH}/backend:/var/www/html:delegated
    networks:
      - proxy
      - host_network
    #tty need for error log to standard error
    tty: true
    #command: /bin/bash
    environment:
      - XDEBUG_MODE=debug
      - XDEBUG_OUTPUT_DIR=/tmp/xdebug
      - XDEBUG_START=yes    
  
  redis:
    container_name: ${PROJECT_NAME}-${CONFIG}-redis
    image: ${PROJECT_NAME}-${CONFIG}-redis:latest
    build: ${CONFIG}/redis
    profiles:
    - all
    - backend
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - proxy
      - host_network

  redis-commander:
    container_name: ${PROJECT_NAME}-${CONFIG}-redis-commander
    hostname: ${PROJECT_NAME}-${CONFIG}-redis-commander
    image: 'ghcr.io/joeferner/redis-commander:latest'
    profiles:
    - all
    - backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.redis-commander.rule=Host(`redis-commander.localhost`)
      - traefik.http.routers.redis-commander.tls=${DOCKER_STACK_SSL}
    restart: always
    environment:
      - REDIS_HOSTS=${PROJECT_NAME}-${CONFIG}-redis
    networks:
      - proxy
      - host_network

 
  nodefe:
    container_name: ${PROJECT_NAME}-${CONFIG}-nodefe
    profiles:
    - frontend
    - all
    image: ${PROJECT_NAME}-${CONFIG}-nodefe:latest
    build: ${CONFIG}/nodefe
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.nodefe.rule=Host(`nodefe.localhost`)
      - traefik.http.routers.nodefe.tls=${DOCKER_STACK_SSL}
    volumes:
      - ${PROJECT_PATH}/frontend:/var/www/html:delegated
    environment:
      NODE_ENV: development
    tty: true
    #command: /bin/bash
    command: npm run --prefix /var/www/html dev
    networks:
      - proxy
      - host_network

  nodeinstall:
    container_name: ${PROJECT_NAME}-${CONFIG}-nodefe
    profiles:
    - install
    image: ${PROJECT_NAME}-${CONFIG}-nodefe:latest
    build: ${CONFIG}/nodefe
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.nodefe.rule=Host(`nodefe.localhost`)
      - traefik.http.routers.nodefe.tls=${DOCKER_STACK_SSL}
    volumes:
      - ${PROJECT_PATH}/frontend:/var/www/html:delegated
    environment:
      NODE_ENV: development
    tty: true
    command: /bin/bash
    networks:
      - proxy
      - host_network

  storybook:
    container_name: ${PROJECT_NAME}-${CONFIG}-storybook
    profiles:
    - frontend
    - all
    image: ${PROJECT_NAME}-${CONFIG}-storybook:latest
    build: ${CONFIG}/storybook
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.storybook.rule=Host(`sb.localhost`)
      - traefik.http.routers.storybook.tls=${DOCKER_STACK_SSL}
    volumes:
      - ${PROJECT_PATH}/frontend:/var/www/html:delegated
    environment:
      NODE_ENV: development
    tty: true
    #command: /bin/bash
    command: npm run --prefix /var/www/html storybook
    networks:
      - proxy
      - host_network

  mailbox:
    container_name: ${PROJECT_NAME}-${CONFIG}-mailbox
    profiles:
    - backend
    - all
    image: ${PROJECT_NAME}-${CONFIG}-mailbox:latest
    build: ${CONFIG}/mailbox
    platform: linux/amd64
    ports:
      - 1080:1080
    networks:
      - proxy
      - host_network

networks:
  host_network:
    driver: bridge
  proxy:
    external: true    
